var searchIndex = new Map(JSON.parse('[\
["egg_sketches",{"doc":"<code>egg-sketches</code> is a library adding support for program …","t":"PPPPIGNNNNNNNHHNNNNNNNNNNNNHNNNNNCHH","n":["Any","Contains","Node","Or","Sketch","SketchNode","borrow","borrow_mut","children","children_mut","clone","clone_into","cmp","eclass_extract_sketch","eclass_satisfies_sketch","eq","equivalent","equivalent","fmt","fmt","from","from_op","get_hash","hash","into","matches","partial_cmp","satisfies_sketch","to_owned","to_string","try_from","try_into","type_id","util","comparing_eclass_extract_sketch","grow_egraph_until"],"q":[[0,"egg_sketches"],[34,"egg_sketches::util"],[36,"egg"],[37,"egg::language"],[38,"core::clone"],[39,"core::cmp"],[40,"core::cmp"],[41,"egg::language"],[42,"egg::extract"],[43,"egg::language"],[44,"core::fmt"],[45,"core::result"],[46,"egg::language"],[47,"core::marker"],[48,"core::hash"],[49,"hashbrown::set"],[50,"alloc::string"],[51,"core::any"],[52,"egg::rewrite"],[53,"core::default"],[54,"egg::run"],[55,"core::ops::function"]],"d":["Any program of the underlying <code>Language</code>.","Programs that contain sub-programs satisfying the given …","Programs made from this <code>Language</code> node whose children …","Programs that satisfy any of these sketches.","A <code>Sketch</code> is a program pattern that is satisfied by a …","The language of <code>Sketch</code>es.","","","","","","","","Returns the best program satisfying <code>s</code> according to <code>cost_f</code> …","Is the <code>id</code> e-class of <code>egraph</code> representing at least one …","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","Returns the set of e-classes of <code>egraph</code> that represent at …","","","","","","","",""],"i":[1,1,1,1,0,0,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,0,0,0],"f":"``````{ce{}{}}0{{{b{c}}}{{f{d}}}h}0{{{b{c}}}{{b{c}}}j}{{ce}l{}{}}{{{b{c}}{b{c}}}nA`}{{{Ab{c}}e{Ad{cg}}d}{{Aj{{Ah{{Af{c}}}}}}}h{{Al{c}}}{{An{c}}}}{{{Ab{c}}{Ad{ce}}d}B`h{{An{c}}}}{{{b{c}}{b{c}}}B`Bb}{{ce}B`{}{}}0{{{b{c}}Bd}Bf{hBh}}{{{b{c}}Bd}BfBj}{cc{}}{{Bl{Bn{d}}}{{C`{{b{c}}e}}}Cb{}}{{ce}Cd{CfCh}Cj}{{{b{c}}e}lCfCl}>{{{b{c}}{b{c}}}B`h}{{{b{c}}{b{c}}}{{Aj{n}}}Cn}{{{Ab{c}}{Ad{ce}}}{{Db{dD`}}}h{{An{c}}}}{ce{}{}}{cDd{}}{c{{C`{e}}}{}{}}0{cDf{}}`{{{Ab{c}}ee{Ad{cg}}d}{{Aj{{Ah{{Af{c}}}}}}}h{{Al{c}}}{{An{c}}}}{{Bl{Ad{ce}}{f{{Dh{ce}}}}g}{{Ad{ce}}}h{{An{c}}Dj}{{E`{{Dl{ce}}}{{Dn{B`}}}}}}","c":[],"p":[[6,"SketchNode",0],[5,"Id",36],[1,"slice"],[10,"Language",37],[10,"Clone",38],[1,"unit"],[6,"Ordering",39],[10,"Ord",39],[8,"Sketch",0],[5,"EGraph",40],[5,"RecExpr",37],[1,"tuple"],[6,"Option",41],[10,"CostFunction",42],[10,"Analysis",37],[1,"bool"],[10,"PartialEq",39],[5,"Formatter",43],[8,"Result",43],[10,"Display",43],[10,"Debug",43],[1,"str"],[5,"Vec",44],[6,"Result",45],[10,"FromOp",37],[1,"u64"],[10,"Hash",46],[10,"Sized",47],[10,"BuildHasher",46],[10,"Hasher",46],[10,"PartialOrd",39],[8,"FxBuildHasher",48],[5,"HashSet",49],[5,"String",50],[5,"TypeId",51],[5,"Rewrite",52],[10,"Default",53],[5,"Runner",54],[17,"Output"],[10,"FnMut",55]],"b":[[18,"impl-Display-for-SketchNode%3CL%3E"],[19,"impl-Debug-for-SketchNode%3CL%3E"]]}]\
]'));
if (typeof exports !== 'undefined') exports.searchIndex = searchIndex;
else if (window.initSearch) window.initSearch(searchIndex);
