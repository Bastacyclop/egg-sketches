var searchIndex = JSON.parse('{\
"egg_sketches":{"doc":"<code>egg-sketches</code> is a library adding support for program …","t":"NNNNGELLLLLLLFFLLLLLLLLLLLLFLLLLL","n":["Any","Contains","Node","Or","Sketch","SketchNode","borrow","borrow_mut","children","children_mut","clone","clone_into","cmp","eclass_extract_sketch","eclass_satisfies_sketch","eq","equivalent","equivalent","fmt","fmt","from","from_op","get_hash","hash","into","matches","partial_cmp","satisfies_sketch","to_owned","to_string","try_from","try_into","type_id"],"q":[[0,"egg_sketches"],[33,"egg"],[34,"egg::language"],[35,"core::clone"],[36,"core::cmp"],[37,"core::cmp"],[38,"egg::language"],[39,"egg::extract"],[40,"egg::language"],[41,"core::fmt"],[42,"core::result"],[43,"egg::language"],[44,"core::marker"],[45,"core::hash"],[46,"hashbrown::set"],[47,"alloc::string"],[48,"core::any"]],"d":["Any program of the underlying <code>Language</code>.","Programs that contain sub-programs satisfying the given …","Programs made from this <code>Language</code> node whose children …","Programs that satisfy any of these sketches.","A <code>Sketch</code> is a program pattern that is satisfied by a …","The language of <code>Sketch</code>es.","","","","","","","","Returns the best program satisfying <code>s</code> according to <code>cost_f</code> …","Is the <code>id</code> e-class of <code>egraph</code> representing at least one …","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","Returns the set of e-classes of <code>egraph</code> that represent at …","","","","",""],"i":[1,1,1,1,0,0,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1],"f":[0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[[[1,[-1]]],[[3,[2]]],4],[[[1,[-1]]],[[3,[2]]],4],[[[1,[-1]]],[[1,[-1]]],5],[[-1,-2],6,[],[]],[[[1,[-1]],[1,[-1]]],7,8],[[[9,[-1]],-2,[10,[-1,-3]],2],[[12,[[6,[[11,[-1]]]]]]],4,[[13,[-1]]],[[14,[-1]]]],[[[9,[-1]],[10,[-1,-2]],2],15,4,[[14,[-1]]]],[[[1,[-1]],[1,[-1]]],15,16],[[-1,-2],15,[],[]],[[-1,-2],15,[],[]],[[[1,[-1]],17],18,[4,19]],[[[1,[-1]],17],18,20],[-1,-1,[]],[[21,[22,[2]]],[[23,[[1,[-1]]]]],24],[[-1,-2],25,[26,27],28],[[[1,[-1]],-2],6,26,29],[-1,-2,[],[]],[[[1,[-1]],[1,[-1]]],15,4],[[[1,[-1]],[1,[-1]]],[[12,[7]]],30],[[[9,[-1]],[10,[-1,-2]]],[[32,[2,31]]],4,[[14,[-1]]]],[-1,-2,[],[]],[-1,33,[]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,34,[]]],"c":[],"p":[[4,"SketchNode",0],[3,"Id",33],[15,"slice"],[8,"Language",34],[8,"Clone",35],[15,"tuple"],[4,"Ordering",36],[8,"Ord",36],[6,"Sketch",0],[3,"EGraph",37],[3,"RecExpr",34],[4,"Option",38],[8,"CostFunction",39],[8,"Analysis",34],[15,"bool"],[8,"PartialEq",36],[3,"Formatter",40],[6,"Result",40],[8,"Display",40],[8,"Debug",40],[15,"str"],[3,"Vec",41],[4,"Result",42],[8,"FromOp",34],[15,"u64"],[8,"Hash",43],[8,"Sized",44],[8,"BuildHasher",43],[8,"Hasher",43],[8,"PartialOrd",36],[6,"FxBuildHasher",45],[3,"HashSet",46],[3,"String",47],[3,"TypeId",48]],"b":[[18,"impl-Display-for-SketchNode%3CL%3E"],[19,"impl-Debug-for-SketchNode%3CL%3E"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
